
## week 2 
Date 30/dec/2020

#reading the data
df = pd.read_excel("/content/drive/MyDrive/do well/week 2/week_2_data.xlsx")


df.head()
# to check the frist 5 rows of the dataset

df.shape
# to check the shape of the dataset

#to describe the data
df.describe()

#checking the names of the columns
df.columns

we found that the columns names is not in correct form so we rename the column names

#to rename the names of columns

data = df.rename(columns = {'Weeks': "Weeks", 'W1' : "W1M", 'Unnamed: 2' : "W1T", 'Unnamed: 3': "W1W", 'Unnamed: 4': "W1Th", 'Unnamed: 5':"W1F",
       'W2': "W2M", 'Unnamed: 7':'W2T', 'Unnamed: 8':"W2W", 'Unnamed: 9':"W2Th", 'Unnamed: 10': "W2F"})
       
## drop the unusable 
data =  data.drop("Weeks", axis = 1 ) # dropping the column ("Weeks")
data = data.drop([0]) # droping the first row (days)

## inspecting the modified data
dat.head()

data.to_csv("/content/drive/MyDrive/do well/week 2/week_2_data.csv") # saving it to csv form

data.describe() # #Display some descriptive statistics for the  columns

# how many missing values present in the data?
data.isnull().sum()

#information of the data set
data.info()#checking for null values too.

we have observed that the data type is of object that should we int form so now we will convert the datatype in int

# so we have converted the data into float 
for i in data.columns:
  data[i] = data[i].astype(float)
  
  
after converting the data type we deals with missing values 

we use mean method to deal with missing values
just find the mean of each row and fill that value at place of missing values
we use mean method to deal with missing values because the number of missing observations is low.
as we are dealing with each and every row:

mean = round(data.mean(axis=1))# find the mean of each row
for i,col in enumerate(data):# filling up missing values using the mean of that particular row
    data.iloc[:, i] = data.iloc[:,i].fillna(mean)


#day2(thusday)
date 31/dec/2020

I have observed that most of the data is filled sequentially

    for a particular week and row

    it is filled like that
        2,3,4,5,6
        3,3,4,4,5,5
        2,2,3,4,4

    and is filled in asscending order for the particular week.

    so we will deal with imputing missing values according to that.

   #After observing the data we find that the missing number of data points to include closer to the missing value
    so we use KNN imputer
# import the KNNimputer class 
from sklearn.impute import KNNImputer 
# create an object for KNNImputer 
imputer = KNNImputer(n_neighbors=2) 
After_imputation = imputer.fit_transform(data_week_2) 


we have seperated the week twoo dat to fill the null values and then join the data of both the weeks week1 and week2 

data_imputed = data_week_1.join(data_week_2_imputed)
data_imputed.head()
 and this imputes with the best reesult of our data 
 
 we are procceding for furthur tasks
